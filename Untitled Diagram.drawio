<mxfile host="app.diagrams.net" modified="2020-10-30T13:00:29.781Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36" etag="7oqQz59QuYNflnMieFNJ" version="13.8.8" type="github">
  <diagram name="Page-1" id="74e2e168-ea6b-b213-b513-2b3c1d86103e">
    <mxGraphModel dx="2522" dy="794" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1100" pageHeight="850" background="#ffffff" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="QSz69-KZC1hkT4Da6_BA-25" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="QSz69-KZC1hkT4Da6_BA-5" target="QSz69-KZC1hkT4Da6_BA-21">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-5" value="AWS network Loader Balancer" style="swimlane;" vertex="1" parent="1">
          <mxGeometry x="230" y="130" width="190" height="100" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-6" value="Node 1 - Node JS API&amp;nbsp;&lt;br&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;" vertex="1" parent="QSz69-KZC1hkT4Da6_BA-5">
          <mxGeometry x="20" y="30" width="140" height="20" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-7" value="Node 2 - Node JS API" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;" vertex="1" parent="QSz69-KZC1hkT4Da6_BA-5">
          <mxGeometry x="30" y="70" width="130" height="20" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-11" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="QSz69-KZC1hkT4Da6_BA-9" target="QSz69-KZC1hkT4Da6_BA-5">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="180" y="180" />
              <mxPoint x="180" y="180" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-9" value="client" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="140" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-17" value="&amp;nbsp;via Https" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;" vertex="1" parent="1">
          <mxGeometry x="150" y="160" width="70" height="20" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-32" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="QSz69-KZC1hkT4Da6_BA-21" target="QSz69-KZC1hkT4Da6_BA-30">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-21" value="Kafka Broker" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="265" y="330" width="120" height="70" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-26" value="" style="endArrow=classic;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="QSz69-KZC1hkT4Da6_BA-21">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="520" y="330" as="sourcePoint" />
            <mxPoint x="450" y="365" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-27" value="I choose Kafka so that each log can essentially stored so that it can be &quot;replayed&quot; and the order of events is retained this can prevent lost of messages should something go wrong down the line" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="300" width="190" height="160" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-28" value="Kafka Streams - KSQL&lt;br&gt;&lt;br&gt;Kafka Streams enables you transform and query as fast as you can stream&amp;nbsp; it.&amp;nbsp;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="450" y="330" width="170" height="130" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-29" value="Node JS API service" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="660" y="365" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-30" value="Node JS backup service to S3" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="265" y="460" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-33" value="" style="endArrow=classic;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="QSz69-KZC1hkT4Da6_BA-28" target="QSz69-KZC1hkT4Da6_BA-29">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="520" y="260" as="sourcePoint" />
            <mxPoint x="570" y="210" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-38" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="QSz69-KZC1hkT4Da6_BA-34" target="QSz69-KZC1hkT4Da6_BA-29">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-34" value="client&amp;nbsp;" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="910" y="355" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-36" value="So I made my choice here to use Kafka stream has it&amp;nbsp; works hand in hand with Kafka and you can use query data from the broker on the fly, I did not use SQL DB as would imagine&amp;nbsp;that this data is real-time is is not necessary needed later on . As once a sporting event is over the data logs does not need to be stored. , However i also back&amp;nbsp; up into the S3 incase we do need it later." style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="450" y="120" width="200" height="170" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-39" value="Https request" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;" vertex="1" parent="1">
          <mxGeometry x="810" y="370" width="90" height="20" as="geometry" />
        </mxCell>
        <mxCell id="QSz69-KZC1hkT4Da6_BA-40" value="&lt;div&gt;What is the main difference between these two functions?&amp;nbsp;&lt;/div&gt;&lt;div&gt;The first is not safe for SQL injection, as its allows for SQL to be written in via the data variable.&lt;/div&gt;&lt;div&gt;Why is one better than the other?&lt;/div&gt;&lt;div&gt;The other function is safe for SQL injection&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;const db = myDatabaseManager;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;const myDbFunc = async (data) =&amp;gt; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; await db(INSERT INTO table (id,name,age)&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; VALUES(${data.id},“{data.name}”, ${data.age})&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ON DUPLICATE KEY UPDATE name =‘${data.name}”,age=${data.age};‘)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;const myOtherDbFunc = async (data) =&amp;gt; {&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const updatedRows = await db(`UPDATE table SET (name, age) VALUES (&quot;${data.name}&quot;,${data.age}) WHERE id = ${data.id} RETURNING *;`)&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // If no rows were updated&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!updatedRows) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; await db(`INSERT INTO table (id, name, age) VALUES(${data.id},&quot;${data.name}&quot;, ${data.age});`)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }}&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-160" y="550" width="890" height="490" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
